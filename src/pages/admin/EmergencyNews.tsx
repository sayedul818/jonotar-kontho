import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { 
  AlertTriangle, 
  Plus, 
  Edit, 
  Eye, 
  Trash2,
  Clock,
  Zap,
  Users,
  Send,
  Siren
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

const EmergencyNews = () => {
  const [emergencyAlerts, setEmergencyAlerts] = useState([
    {
      id: 1,
      title: "‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø: ‡¶¢‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏",
      message: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞ ‡¶¢‡¶æ‡¶ï‡¶æ ‡¶ì ‡¶Ü‡¶∂‡ßá‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ ‡ß¨ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡•§",
      severity: "high",
      isActive: true,
      createdAt: "‡ß®‡ß¶‡ß®‡ß™-‡ß¶‡ßß-‡ßß‡ß´ ‡ßß‡ß¶:‡ß©‡ß¶ ‡¶è‡¶è‡¶Æ",
      views: 15000,
      type: "weather"
    },
    {
      id: 2,
      title: "‡¶ü‡ßç‡¶∞‡¶æ‡¶´‡¶ø‡¶ï ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶® ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ ‡¶¨‡¶®‡ßç‡¶ß",
      message: "‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶®-‡ß® ‡¶è ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶™‡¶æ‡¶á‡¶™ ‡¶´‡ßá‡¶ü‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶∞‡¶æ‡¶∏‡ßç‡¶§‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶™‡¶• ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      severity: "medium",
      isActive: true,
      createdAt: "‡ß®‡ß¶‡ß®‡ß™-‡ß¶‡ßß-‡ßß‡ß´ ‡ß¶‡ßØ:‡ßß‡ß´ ‡¶è‡¶è‡¶Æ",
      views: 8500,
      type: "traffic"
    },
    {
      id: 3,
      title: "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶°‡ßá‡¶ô‡ßç‡¶ó‡ßÅ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß‡ßá ‡¶∏‡¶ö‡ßá‡¶§‡¶®‡¶§‡¶æ",
      message: "‡¶°‡ßá‡¶ô‡ßç‡¶ó‡ßÅ ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßã‡¶™ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶æ‡¶®‡¶ø ‡¶ú‡¶Æ‡¶§‡ßá ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§",
      severity: "medium",
      isActive: false,
      createdAt: "‡ß®‡ß¶‡ß®‡ß™-‡ß¶‡ßß-‡ßß‡ß™ ‡ß¶‡ßÆ:‡ß™‡ß´ ‡¶è‡¶è‡¶Æ",
      views: 12000,
      type: "health"
    }
  ]);

  const [newAlert, setNewAlert] = useState({
    title: "",
    message: "",
    severity: "medium",
    type: "general"
  });

  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "high":
        return <Badge className="bg-red-100 text-red-800">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø</Badge>;
      case "medium":
        return <Badge className="bg-yellow-100 text-yellow-800">‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ</Badge>;
      case "low":
        return <Badge className="bg-green-100 text-green-800">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£</Badge>;
      default:
        return <Badge>‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ</Badge>;
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "weather":
        return "üåßÔ∏è";
      case "traffic":
        return "üöó";
      case "health":
        return "üè•";
      default:
        return "üì¢";
    }
  };

  const toggleAlertStatus = (id: number) => {
    setEmergencyAlerts(alerts => 
      alerts.map(alert => 
        alert.id === id 
          ? { ...alert, isActive: !alert.isActive }
          : alert
      )
    );
  };

  const createEmergencyAlert = () => {
    if (!newAlert.title || !newAlert.message) return;

    const alert = {
      id: emergencyAlerts.length + 1,
      ...newAlert,
      isActive: true,
      createdAt: new Date().toLocaleString('bn-BD'),
      views: 0
    };

    setEmergencyAlerts([alert, ...emergencyAlerts]);
    setNewAlert({ title: "", message: "", severity: "medium", type: "general" });
    setIsDialogOpen(false);
  };

  const getActiveAlerts = () => emergencyAlerts.filter(alert => alert.isActive).length;
  const getTotalViews = () => emergencyAlerts.reduce((total, alert) => total + alert.views, 0);

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 bn-text flex items-center">
            <Siren className="mr-2 h-6 w-6 text-red-600" />
            ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶
          </h1>
          <p className="text-gray-600 bn-text">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶ì ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶ø‡¶Ç ‡¶®‡¶ø‡¶â‡¶ú ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ</p>
        </div>
        
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button className="w-full sm:w-auto bg-red-600 hover:bg-red-700 bn-text">
              <Siren className="mr-2 h-4 w-4" />
              ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[525px]">
            <DialogHeader>
              <DialogTitle className="bn-text">‡¶®‡¶§‡ßÅ‡¶® ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ</DialogTitle>
              <DialogDescription className="bn-text">
                ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ ‡¶§‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶æ‡¶§ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶¨‡ßá‡•§
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <label className="text-sm font-medium bn-text">‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ</label>
                <Input
                  value={newAlert.title}
                  onChange={(e) => setNewAlert({...newAlert, title: e.target.value})}
                  placeholder="‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ..."
                  className="bn-text"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium bn-text">‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ</label>
                <Textarea
                  value={newAlert.message}
                  onChange={(e) => setNewAlert({...newAlert, message: e.target.value})}
                  placeholder="‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                  className="min-h-[100px] bn-text"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium bn-text">‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨</label>
                  <select 
                    value={newAlert.severity}
                    onChange={(e) => setNewAlert({...newAlert, severity: e.target.value})}
                    className="w-full p-2 border rounded-md bn-text"
                  >
                    <option value="high">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø</option>
                    <option value="medium">‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ</option>
                    <option value="low">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£</option>
                  </select>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium bn-text">‡¶ß‡¶∞‡¶®</label>
                  <select 
                    value={newAlert.type}
                    onChange={(e) => setNewAlert({...newAlert, type: e.target.value})}
                    className="w-full p-2 border rounded-md bn-text"
                  >
                    <option value="general">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£</option>
                    <option value="weather">‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ</option>
                    <option value="traffic">‡¶Ø‡¶æ‡¶®‡¶¨‡¶æ‡¶π‡¶®</option>
                    <option value="health">‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø</option>
                  </select>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDialogOpen(false)} className="bn-text">
                ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
              </Button>
              <Button onClick={createEmergencyAlert} className="bg-red-600 hover:bg-red-700 bn-text">
                <Send className="mr-2 h-4 w-4" />
                ‡¶™‡¶æ‡¶†‡¶æ‡¶®
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <AlertTriangle className="h-8 w-8 text-red-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600 bn-text">‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ</p>
                <p className="text-2xl font-bold text-gray-900">{getActiveAlerts()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600 bn-text">‡¶Æ‡ßã‡¶ü ‡¶¶‡¶∞‡ßç‡¶∂‡¶ï</p>
                <p className="text-2xl font-bold text-gray-900">{getTotalViews().toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <Zap className="h-8 w-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600 bn-text">‡¶ó‡¶°‡¶º ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏</p>
                <p className="text-2xl font-bold text-gray-900 bn-text">‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Emergency Alerts List */}
      <Card>
        <CardHeader>
          <CardTitle className="bn-text">‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {emergencyAlerts.map((alert) => (
              <div 
                key={alert.id} 
                className={`p-4 border rounded-lg transition-all ${
                  alert.isActive ? 'border-red-200 bg-red-50' : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <span className="text-lg">{getTypeIcon(alert.type)}</span>
                      {getSeverityBadge(alert.severity)}
                      {alert.isActive && (
                        <Badge className="bg-green-100 text-green-800 animate-pulse">‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º</Badge>
                      )}
                    </div>
                    
                    <h3 className="font-semibold text-gray-900 mb-2 bn-text">
                      {alert.title}
                    </h3>
                    
                    <p className="text-gray-700 mb-3 bn-text">
                      {alert.message}
                    </p>
                    
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span className="flex items-center bn-text">
                        <Clock className="mr-1 h-3 w-3" />
                        {alert.createdAt}
                      </span>
                      <span className="flex items-center bn-text">
                        <Eye className="mr-1 h-3 w-3" />
                        {alert.views.toLocaleString()} ‡¶¶‡¶∞‡ßç‡¶∂‡¶ï
                      </span>
                    </div>
                  </div>

                  <div className="flex items-center space-x-4 ml-4">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-600 bn-text">‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º</span>
                      <Switch
                        checked={alert.isActive}
                        onCheckedChange={() => toggleAlertStatus(alert.id)}
                      />
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Button variant="ghost" size="sm">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="sm">
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="sm" className="text-red-600 hover:text-red-700">
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default EmergencyNews;